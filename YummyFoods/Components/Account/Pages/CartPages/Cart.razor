@page "/cart"
@using Microsoft.AspNetCore.Authorization
@using System.Globalization

@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IShoppingCartRepository shoppingCartRepository;
@attribute [Authorize]

@if (IsLoading)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="Loading..." />
    </div>
}
else
{
    @if (shoppingCarts.Any())
    {
        <div class="row w-100">
            <div class="col-lg-6 col-12">
                <div class="container p-4 m-2">
                    <h4 class="text-center text-success display-6">
                        Cart Summary
                    </h4>

                    @foreach (var cartItem in shoppingCarts)
                    {
                        <div class="d-flex p-2 m-2">
                            <div class="card flex-row w-100">
                                <img class="card-img-left" style="width: 120px;" src="@(cartItem.Product.ImageUrl?? "Images/defualt.png")" />
                                <div class="card-body">
                                    <div class="d-flex justify-content-between align-items-center">
                                        <h4 class="">
                                            @cartItem.Product.Name
                                        </h4>
                                        <h4>
                                            @cartItem.Product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                        </h4>
                                    </div>
                                    <div class="flex-fill">
                                        <h4 class="text-danger">
                                            @((cartItem.Product.Price * cartItem.Count).ToString("C", CultureInfo.GetCultureInfo("en-us")))
                                        </h4>
                                    </div>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="d-flex justify-content-between g-0">
                                            <span @onclick="()=>UpdateCartItem(cartItem.ProductId,-1)">
                                                <i class="bi bi-dash-circle-fill btn text-secondary"></i>
                                            </span>
                                            <span class="ml-1 me-1">
                                                <b class="lead">@cartItem.Count</b>
                                            </span>
                                            <span @onclick="()=>UpdateCartItem(cartItem.ProductId,1)">
                                                <i class="bi bi-plus-circle-fill btn text-secondary"></i>
                                            </span>
                                        </div>
                                        <button class="btn btn-danger" @onclick="()=> UpdateCartItem(cartItem.ProductId,-10000)">Remove</button>

                                    </div>
                                </div>
                            </div>

                        </div>
                    }

                </div>
            </div>
            <div class="col-lg-6 col-12 p-4">
                <div class="card">
                    <div class="card-header text-success text-center display-6">
                        Pickup Details
                    </div>
                    <EditForm Model="orderHeader" FormName="CartForm" OnInvalidSubmit="ProceesOrderCreation">
                        <DataAnnotationsValidator />
                        <div class="card-body">
                            <div class="form-group">
                                <label>Name</label>
                                <InputText @bind-Value="orderHeader.Name" type="text" class="form-control" />
                                <ValidationMessage For="() => orderHeader.Name" />
                            </div>
                            <div class="form-group">
                                <label>Email</label>
                                <InputText @bind-Value="orderHeader.Email" type="text" class="form-control" />
                                <ValidationMessage For="() => orderHeader.Email" />
                            </div>
                            <div class="form-group">
                                <label>Phone Number</label>
                                <InputText @bind-Value="orderHeader.PhoneNumber" type="text" class="form-control" />
                                <ValidationMessage For="() => orderHeader.PhoneNumber" />
                            </div>
                            <div class="card mt-4 bg-light">
                                <div class="card-body">
                                    <h4>
                                        Grand Total: @orderHeader.OrderTotal.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                    </h4>
                                    <h4>
                                        No. of Items: @TotalItems
                                    </h4>
                                </div>
                            </div>
                        </div>

                        <button type="submit" class="btn btn-success m-4">
                            Looks Good? Place Order!
                        </button>
                    </EditForm>

                </div>
            </div>
        </div>
    }
    else
    {
        <div class="p-4">
            <div class="alert alert-warning">
                Your cart is empty! Please add items to cart.
            </div>
        </div>
    }
}
@code {
    private IEnumerable<ShoppingCart> shoppingCarts = new List<ShoppingCart>();
    private bool IsLoading { get; set; } = true;
    [SupplyParameterFromForm]
    public OrderHeader orderHeader { get; set; } = new OrderHeader();
    public int TotalItems { get; set; } = 0;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        orderHeader.Email = user.FindFirst(u => u.Type.Contains("email"))?.Value;
        orderHeader.UserId = user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value;
        await LoadCart();
        IsLoading = false;
        StateHasChanged();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadCart();
            IsLoading = false;
            StateHasChanged();
        }
    }
    private async Task LoadCart()
    {
        shoppingCarts = await shoppingCartRepository.GetAllAsync(orderHeader.UserId);
        orderHeader.OrderTotal = 0;
        TotalItems = 0;
        foreach(var cart in shoppingCarts)
        {
            orderHeader.OrderTotal += (Convert.ToDouble( cart.Product.Price * cart.Count));
            TotalItems += cart.Count;
        }
        orderHeader.OrderTotal = Math.Round(orderHeader.OrderTotal, 2);
    }

    private async Task UpdateCartItem(int productId, int updateBy)
    {
       
        var result = await shoppingCartRepository.UpdateCartAsync(orderHeader.UserId, productId, updateBy);
        await LoadCart();
        StateHasChanged();
    }
    private async Task ProceesOrderCreation()
    { 
    }
}
