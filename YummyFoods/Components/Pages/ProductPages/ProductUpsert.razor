@page "/Product/Update/{id:int}"
@page "/Product/Create"
@inject IProductRepository productRepository
@inject ICategoryRepository categoryRepository
@inject NavigationManager navigationManager
@inject IJSRuntime jsRuntime
@inject IWebHostEnvironment hostEnvironment


@if (isLoading)
{
    <div class="position-absolute w-75 h-75 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="Loading..." />
    </div>
}
else
{
    <div class="card shadow border-0 mt-4">
        <div class="card-header bg-black bg-gradient ml-0 py-3">
            <div class="row">
                <div class="col-12 text-center">
                    <h2 class="text-white py-2">@(Id==0? "Create":"Update")Product</h2>
                </div>
            </div>
        </div>
        <div class="card-body p-4">
            <EditForm Model="Product" FormName="ProductForm" OnValidSubmit="UpsertProduct">
                <DataAnnotationsValidator />
                <div class="border p-3 mt-4">
                    <div class="form-floating py-3 col-12">
                        <InputText id="name" class="form-control" @bind-Value="Product.Name" />
                        <label for="name">Name</label>
                        <ValidationMessage For="@(() => Product.Name)" />
                    </div>

                    <div class="form-floating py-3 col-12">
                        <InputText id="Description" class="form-control" @bind-Value="Product.Description" />
                        <label for="Description">Description</label>
                        <ValidationMessage For="@(() => Product.Description)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputText id="SpecialTag" class="form-control" @bind-Value="Product.SpecialTag" />
                        <label for="SpecialTag">SpecialTag</label>
                        <ValidationMessage For="@(() => Product.SpecialTag)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputNumber id="Price" class="form-control" @bind-Value="Product.Price" />
                        <label for="Price">Price</label>
                        <ValidationMessage For="@(() => Product.Price)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        <InputSelect id="category" class="form-select" @bind-Value="Product.CategoryId">
                            <option value="0" disabled selected>Select Category</option>
                            @foreach (var category in Categories)
                            {
                                <option value="@category.Id">@category.Name</option>
                            }
                        </InputSelect>
                        <label for="category">Category</label>
                        <ValidationMessage For="@(() => Product.CategoryId)" />
                    </div>
                    <div class="form-floating py-3 col-12">
                        @if (Product.ImageUrl == null)
                        {
                            <InputFile OnChange="LoadFiles" id="customFile" class="form-control"
                            accept="image/x-png,imake/jpeg"></InputFile>
                            <label for="customFile">Upload Image</label>
                        }
                        @if(Product.ImageUrl is not null)
                        {
                            <div class="row pt-3">
                                <div class="col-3">
                                    <img src="@Product.ImageUrl" alt="Product Image" class="img-thumbnail" />
                                </div>
                                <div class="col-9">
                                    <i class="bi bi-trash btn btn-outline-danger" @onclick="DeleteImage">Remove</i>
                                </div>
                            </div>
                        }
                    </div>  

                    <div class="row mt-3">
                        <div class="col-6 col-md-3">
                            <button type="submit" class="btn btn-primary form-control" disabled="@isLoading">
                                <i class="bi bi-floppy2-fill"></i> @(Id == 0 ? "Create" : "Update")
                            </button>
                        </div>
                        <div class="col-6 col-md-3">
                            <a href="product" class="btn btn-secondary form-control" disabled="@isLoading">
                                <i class="bi bi-arrow-bar-left"></i> Back to list
                            </a>
                        </div>
                    </div>
                </div>
            </EditForm> 

        </div>
    </div>
}
@code {
    [Parameter]
    public int Id { get; set; }

    private bool isLoading { get; set; } = true;

    [SupplyParameterFromForm]
    private Product Product { get; set; } = new Product();

    private string directoryPath { get; set; } 

    private IEnumerable<Category> Categories { get; set; } = new List<Category>();

    protected override Task OnInitializedAsync()
    {
        directoryPath = Path.Combine(hostEnvironment.WebRootPath,"Images","Product");
        return base.OnInitializedAsync();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProductAndCategoryList();
            isLoading = false;
            StateHasChanged();
        }
    }
    private async Task LoadProductAndCategoryList()
    {
        if (Id > 0)
        {
            Product = await productRepository.GetAsync(Id);
        }
        Categories = await categoryRepository.GetAllAsync();
    }
    private async Task UpsertProduct()
    {
        isLoading = true;
        if (Id ==0)
        {
            await productRepository.CreateAsync(Product);
            await jsRuntime.ToasterSuccess("Product created successfully!");
        }
        else
        {
            await productRepository.UpdateAsync(Product);
            await jsRuntime.ToasterSuccess("Product updated successfully!");


        }
        isLoading = false;
        navigationManager.NavigateTo("Product");
    }
    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        isLoading = true;
        var file = e.File;
        FileInfo fileInfo = new FileInfo(file.Name);
        var newFileName = $"{Guid.NewGuid()}{fileInfo.Extension}";
        if (!Directory.Exists(directoryPath))
        {
            Directory.CreateDirectory(directoryPath);
        }
        var path = Path.Combine(directoryPath, newFileName);
        await using FileStream fileStream = new (path, FileMode.Create);
        await file.OpenReadStream(file.Size).CopyToAsync(fileStream);
        Product.ImageUrl = $"Images/Product/{newFileName}";
        isLoading = false;
    }
    void DeleteImage()
    {
        if (Product.ImageUrl is null)
            return;
        var filePathToDeleteImage = Path.Combine(directoryPath, Product.ImageUrl.Split('/').Reverse().First());
        if (!File.Exists(filePathToDeleteImage))
            return;
        File.Delete(filePathToDeleteImage);
        Product.ImageUrl = null;
        return;
    }
}
