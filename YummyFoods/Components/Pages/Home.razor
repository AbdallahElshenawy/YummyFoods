@page "/"
@using System.Globalization
@inject YummyFoods.Repository.IRepository.IProductRepository productRepository
@inject YummyFoods.Repository.IRepository.ICategoryRepository categoryRepository
@inject AuthenticationStateProvider AuthenticationStateProvider;
@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager;
@inject IShoppingCartRepository shoppingCartRepository;
<PageTitle>Home</PageTitle>
@if (IsLoading)
{
    <div class="position-absolute w-100 vh-100 d-flex flex-column align-items-center bg-white justify-content-center">
        <img src="images/loading.gif" alt="Loading..." />
    </div>
}
else
{
    <div class="container-fluid px-0 m-0 full-width">
        <div class="jumbotron-custom">
            <div class="m-auto d-flex align-items-center" style="width: 400px; height: 50vh;">

                <div class="d-flex align-items-center" style="width: 100%;">
                    <input type="text" class="form-control rounded-pill"
                    @bind:event="oninput" @bind:get="searchText" @bind:set="SeaerchProducts"
                    placeholder="Search for Food Items!"
                    style="width: 100%; padding: 20px;">
                    <span style="position: relative; left: -43px;"><i class="bi bi-search"></i></span>
                </div>
            </div>
        </div>

        <div class="content px-4 m-2">
            <ul class="nav nav-underline justify-content-center mb-2">
                <li class="nav-item">
                    <span class="nav-link @GetClassActive(0)" href="#" style="cursor: pointer" @onclick="()=>FilterProducts(0)">All</span>
                </li>
                @foreach(var category in categories)
                {
                    <li class="nav-item">
                        <span class="nav-link @GetClassActive(category.Id)" href="#" style="cursor: pointer" @onclick="()=>FilterProducts(category.Id)">@category.Name</span>
                    </li>
                }
            </ul>
            <div class="row mt-4 mx-1">

                @foreach (var product in filteredProducts)
                {
                    <div class="col-12 col-md-6 col-lg-4 pe-3 mb-5">
                        <div class="card">
                            <div class="mt-3 mb-2 row">
                                <div class="col-6 px-3">
                                    @if (!string.IsNullOrEmpty(product.SpecialTag))
                                    {
                                        <i class="bi bi-star btn btn-outline-success disabled"> @product.SpecialTag</i>
                                    }
                                </div>
                                <div class="col-6 text-danger text-end h3 px-3">
                                    @product.Price.ToString("C", CultureInfo.GetCultureInfo("en-us"))
                                </div>
                            </div>
                            <div class="text-center">
                                @if (!string.IsNullOrEmpty(product.ImageUrl))
                                {
                                    <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="@product.ImageUrl" style="">
                                }
                                else
                                {
                                    <img class="card-img-top img-thumbnail img-rounded w-50 mt-2" src="images/default.png" style="">

                                }
                            </div>
                            <div class="card-body">
                                <h5 class="card-title text-center lead text-success">@product.Name</h5>
                                <p class="card-text mt-2">@((MarkupString)@product.Description)</p>
                                <h4 class="text-center">
                                    <div class=" m-lg-auto p-2"@onclick="()=>AddOrderItem(product)">
                                        <i class="bi bi-cart3 btn btn-success text-right  px-5 form-control"> Add to cart</i>
                                    </div>
                                </h4>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
@code{
    private IEnumerable<Product> products = new List<Product>();
    private IEnumerable<Product> filteredProducts = new List<Product>();
    private IEnumerable<Category> categories = new List<Category>();
    private bool IsLoading { get; set; } = true;
    private int selectedCategoryId { get; set; } = 0;
    private string searchText { get; set; } = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await LoadProducts();
            IsLoading = false;
            StateHasChanged();
        }
    }
    private async Task LoadProducts()
    {
        products = await productRepository.GetAllAsync();
        categories = await categoryRepository.GetAllAsync();
        FilterProducts(0);
    }

    private void FilterProducts(int categoryid)
    {
        if(categoryid==0)
        {
            filteredProducts = products;
            selectedCategoryId = categoryid;
            return;
        }
        else
        {
            filteredProducts = products.Where(p => p.CategoryId == categoryid).ToList();
            selectedCategoryId = categoryid;
            searchText = string.Empty;
        }

    }
    private void SeaerchProducts(string searchtext)
    {
        if (string.IsNullOrWhiteSpace(searchtext))
        {
            filteredProducts = products;
        }
        else
        {
            filteredProducts = products.Where(p => p.Name.Contains(searchText, StringComparison.InvariantCultureIgnoreCase)).ToList();
        }
        searchText = searchtext;
    }

    private string GetClassActive(int categoryid)
    {
        return categoryid == selectedCategoryId ? "active" : string.Empty;
    }

    private async Task AddOrderItem(Product product)
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        var authenticated = user.Identity is not null && user.Identity.IsAuthenticated;
        if(!authenticated)
        {
            NavigationManager.NavigateTo("Account/Login");
           
        }
        else
        {
            var result = await shoppingCartRepository.UpdateCartAsync(user.FindFirst(u => u.Type.Contains("nameidentifier"))?.Value, product.Id, 1);

            if(result)
            {
                JsRuntime?.ToasterSuccess("Product added to cart successuflly");
            }
            else
            {
                JsRuntime?.ToasterError("An error happened");

            }
        }
         
    }

}